#!/usr/bin/env bash
set -euo pipefail
cd "$(dirname "$0")/.."

ANNOTATIONS=$(jq -cr '.["metadata"]["annotations"]' <<< "${BUILDKITE_PLUGIN_CONFIGURATION}")
PP_ANNOTATIONS=$(jq -r . <<< "${ANNOTATIONS}")

POD_SPEC=$(jq -cr '.["pod-spec"]' <<< "${BUILDKITE_PLUGIN_CONFIGURATION}")


MOUNT_SOURCE=$(jq -cr '.["mount-source"]' <<< "${BUILDKITE_PLUGIN_CONFIGURATION}")
if [ "${MOUNT_SOURCE}" == "true" ]; then
  CONTAINER_NAME=$(jq -cr ".containers[0].name" <<< "${POD_SPEC}")
  echo "Adding a volume mount to ${CONTAINER_NAME} for the source code at /buildkite/src"
  # Add the hostPath volume
  POD_SPEC=$(jq -cr ".volumes |= . + [{\"name\":\"builds\", \"hostPath\":{\"path\":\"/data/buildkite/builds/${BUILDKITE_AGENT_NAME}/${BUILDKITE_ORGANIZATION_SLUG}/${BUILDKITE_PIPELINE_SLUG}\", \"type\": \"Directory\"}}]" <<< "${POD_SPEC}")
  # Add the volumeMount
  POD_SPEC=$(jq -cr ".containers[0].volumeMounts |= . + [{\"name\":\"builds\", \"mountPath\": \"/buildkite/src\", \"readOnly\": true}]" <<< "${POD_SPEC}")
  # Add the nodeSelector
  POD_SPEC=$(jq -cr ".nodeName = \"${BUILDKITE_AGENT_NODE_NAME}\"" <<< "${POD_SPEC}")
fi

PP_POD_SPEC=$(jq -r . <<< "${POD_SPEC}")
echo -e "Creating job with pod-spec:\n${PP_POD_SPEC}"
cat <<EOF | kubectl create -f -
apiVersion: batch/v1
kind: Job
metadata:
  annotations: ${ANNOTATIONS}
  generateName: ${BUILDKITE_PIPELINE_SLUG}-${BUILDKITE_BUILD_NUMBER}-
  labels:
    service: buildkite
    pipeline: ${BUILDKITE_PIPELINE_SLUG}
    step: ${BUILDKITE_STEP_ID}
spec:
  backoffLimit: 0
  completions: 1
  parallelism: 1
  ttlSecondsAfterFinished: 600
  template:
    metadata:
      annotations: ${ANNOTATIONS}
      labels:
        service: buildkite
        pipeline: ${BUILDKITE_PIPELINE_SLUG}
        step: ${BUILDKITE_STEP_ID}
    spec: ${POD_SPEC}
EOF

echo -e "Using annotations\n${PP_ANNOTATIONS}"

TIMEOUT_IN_SECONDS=$(jq -cr '.timeoutInSeconds // 300' <<< "${BUILDKITE_PLUGIN_CONFIGURATION}")
INIT_CONTAINER_COUNT=$(kubectl get -l step=${BUILDKITE_STEP_ID} pod -o json | jq '.items[].spec.initContainers | length')
CONTAINER_COUNT=$(kubectl get -l step=${BUILDKITE_STEP_ID} pod -o json | jq '.items[].spec.containers | length')
echo -e "Found ${INIT_CONTAINER_COUNT} init containers, ${CONTAINER_COUNT} containers"

echo "Waiting for job to be complete..."
TIMEOUT=`expr $(date +%s) + ${TIMEOUT_IN_SECONDS}`
while [ "$(date +%s)" -lt "${TIMEOUT}" ]; do
  if kubectl wait --for=condition=complete job -l step=${BUILDKITE_STEP_ID} --timeout=0 2>/dev/null; then
    JOB_RESULT=0
    break
  fi

  if kubectl wait --for=condition=failed job -l step=${BUILDKITE_STEP_ID} --timeout=0 2>/dev/null; then
    JOB_RESULT=1
    break
  fi

  sleep 1
  printf "."
done
if [ "$(date +%s)" -ge "${TIMEOUT}" ]; then
  echo "Error: Timeout for job expired after ${TIMEOUT_IN_SECONDS} seconds, you can set a longer timeout with the timeoutInSeconds option."
  exit 1
fi

echo "Job logs..."
kubectl logs -l step=${BUILDKITE_STEP_ID} --tail=-1 --follow=true

CONTAINER_STATUSES=$(kubectl get -l step=${BUILDKITE_STEP_ID} pod -o json | jq -cr '[.items[].status.containerStatuses // [], .items[].status.initContainerStatuses // []] | flatten(1)')
EXIT_CODES=$(jq -cr 'map({"name": .name, "exitCode": [.state.terminated.exitCode, .lastState.terminated.exitCode] | max})' <<< "${CONTAINER_STATUSES}")
PP_EXIT_CODES=$(jq -r . <<< "${EXIT_CODES}")
echo -e "Container exit statuses\n${PP_EXIT_CODES}"

# Exit with the max exitCode
jq -e 'max_by(.exitCode) | .exitCode == 0' <<< "${EXIT_CODES}"
